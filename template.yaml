AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  The SAM Template for Deep Frying Tweets. Extra Crispy.

Parameters:
  BotUserId:
    Type: String
    Default: "1381340743877410819"
    Description: The User ID of the Deep Fried Tweets bot

  MaintainerUserId:
    Type: String
    Default: "3122582651"
    Description: My Twitter account's user ID.

Resources:
  DeepFriedTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: deep-fried-table
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  DeepFriedBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: deep-fried-bucket
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldImages
            Status: Enabled
            ExpirationInDays: 7

  ProcessMentionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: twitter_py/
      Handler: handlers.process_mentions
      Runtime: python3.8
      Timeout: 10
      Events:
        CheckMentionsScheduledEvent:
          Type: Schedule
          Properties:
            Enabled: True
            Schedule: rate(3 minutes)
      Environment:
        Variables:
          TABLE_NAME: !Ref DeepFriedTable
          SCREENSHOT_TWEET_FUNCTION: !Ref ScreenshotTweetFunction
          BOT_USER_ID: !Ref BotUserId
          MAINTAINER_USER_ID: !Ref MaintainerUserId
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeepFriedTable
        - LambdaInvokePolicy:
            FunctionName: !Ref ScreenshotTweetFunction

  ScreenshotTweetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: screenshot_tweet/
      Handler: handler.handler
      Runtime: nodejs14.x
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          BUCKET_NAME: !Ref DeepFriedBucket
          DEEP_FRY_FUNCTION: !Ref DeepFryFunction
          APOLOGISE_FUNCTION: !Ref ApologiseFunction
      Policies:
        - S3WritePolicy:
            BucketName: !Ref DeepFriedBucket
        - LambdaInvokePolicy:
            FunctionName: !Ref DeepFryFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ApologiseFunction

  # Source: https://serverlessrepo.aws.amazon.com/applications/arn:aws:serverlessrepo:us-east-1:990551184979:applications~lambda-layer-canvas-nodejs
  NodeCanvasLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: canvas-nodejs
      Description: canvas@2.8.0
      ContentUri:
        Bucket: awsserverlessrepo-changesets-194a7scchwzz0
        Key: 290634446152/arn:aws:serverlessrepo:us-east-1:990551184979:applications-lambda-layer-canvas-nodejs-versions-2.8.4/3d7f3bad-c925-4564-839d-c94234a1c234
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain
      LicenseInfo: MIT

  DeepFryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: deep_fry/
      Handler: handler.handler
      Runtime: nodejs14.x
      Timeout: 20
      MemorySize: 512
      Layers:
        - !Ref NodeCanvasLayer
      Environment:
        Variables:
          # https://github.com/Automattic/node-canvas/issues/1779#issuecomment-861944060
          LD_PRELOAD: /var/task/node_modules/canvas/build/Release/libz.so.1
          BUCKET_NAME: !Ref DeepFriedBucket
          REPLY_FUNCTION: !Ref ReplyFunction
          APOLOGISE_FUNCTION: !Ref ApologiseFunction
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DeepFriedBucket
        - S3WritePolicy:
            BucketName: !Ref DeepFriedBucket
        - LambdaInvokePolicy:
            FunctionName: !Ref ReplyFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ApologiseFunction

  ReplyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: twitter_py/
      Handler: handlers.reply
      Runtime: python3.8
      Timeout: 20
      Environment:
        Variables:
          BUCKET_NAME: !Ref DeepFriedBucket
          TABLE_NAME: !Ref DeepFriedTable
          MAINTAINER_USER_ID: !Ref MaintainerUserId
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DeepFriedBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DeepFriedTable

  ApologiseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: twitter_py/
      Handler: handlers.apologise
      Runtime: python3.8
      Timeout: 10
      Environment:
        Variables:
          TABLE_NAME: !Ref DeepFriedTable
          MAINTAINER_USER_ID: !Ref MaintainerUserId
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeepFriedTable

Outputs:
  DeepFriedTable:
    Description: Deep Fried Table ID
    Value: !Ref DeepFriedTable
  DeepFriedBucket:
    Description: Deep Fried Bucket Name
    Value: !Ref DeepFriedBucket
  ScreenshotTweetFunction:
    Description: Name of the screenshot tweet function
    Value: !Ref ScreenshotTweetFunction
  DeepFryFunction:
    Description: Name of the deep fry function
    Value: !Ref DeepFryFunction
  ReplyFunction:
    Description: Name of the reply function
    Value: !Ref ReplyFunction
  ApologiseFunction:
    Description: Name of the apologise function
    Value: !Ref ApologiseFunction
